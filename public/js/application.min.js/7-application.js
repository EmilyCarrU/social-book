// $(function(){ TodoApp.start() });

// window.TodoItems = Backbone.Collection.extend({
//   model: TodoItem,
//   url: '/todos',

//   initialize: function(){
//     this.on('remove', this.hideModel, this);
//   },

//   hideModel: function(model){
//     model.trigger('hide');
//   },

//   focusOnTodoItem: function(id) {
//     var modelsToRemove = this.filter(function(todoItem){
//       return todoItem.id != id;
//     });

//     this.remove(modelsToRemove);
//   }
// })

// window.TodoItem = Backbone.Model.extend({
//   toggleStatus: function(){
//     if(this.get('status') == 'incomplete'){
//       this.set({'status': 'complete'});
//     }else{
//       this.set({'status': 'incomplete'});
//     }

//     this.save();
//   }
// });

// window.TodosView = Backbone.View.extend({
//   initialize: function(){
//     this.collection.on('add', this.addOne, this);
//     this.collection.on('reset', this.addAll, this);
//   },

//   render: function(){
//     this.addAll()
//     return this;
//   },

//   addAll: function(){
//     this.$el.empty();
//     this.collection.forEach(this.addOne, this);
//   },

//   addOne: function(todoItem){
//     var todoView = new TodoView({model: todoItem});
//     this.$el.append(todoView.render().el);
//   }
// });

// window.TodoView = Backbone.View.extend({
//   template: _.template('<h3 class="<%= status %>"><input type=checkbox <%= status == "complete" ? "checked=checked" : "" %>/> <%= description %> <a href="/#todos/<%= id %>">â˜ž</a></h3>'),

//   events: {
//     'change input': 'toggleStatus'
//   },

//   initialize: function(){
//     this.model.on('change', this.render, this);
//     this.model.on('destroy hide', this.remove, this);
//   },

//   render: function(){
//     this.$el.html(this.template(this.model.toJSON()));
//     return this;
//   },

//   remove: function(){
//     this.$el.remove();
//   },

//   toggleStatus: function(){
//     this.model.toggleStatus()
//   }
// });

// window.TodoApp = new (Backbone.Router.extend({
//   routes: {
//     "": "index",
//     "todos/:id": "show"
//   },

//   initialize: function(){
//     this.todoItems = new TodoItems();
//     this.todosView = new TodosView({collection: this.todoItems});
//     this.todosView.render();
//   },

//   index: function(){
//     $('#app').html(this.todosView.el);
//     this.todoItems.fetch();
//   },

//   start: function(){
//     Backbone.history.start();
//   },

//   show: function(id){
//     this.todoItems.focusOnTodoItem(id);
//   }
// }));

// ebook
// =====

var apiEndpoint = 'http://dev.dotkenneth.com/hyko/api';

window.App = {};
window.App.online = true;


// Models
// ======

App.Section = Backbone.Model.extend({

  urlRoot: 'http://dev.dotkenneth.com/hyko/api',

  initialize: function() {
  },

  url: function() {
    return apiEndpoint + "/get_page/?post_type=section&id="+ this.id + "&children=true"
  },
  parse: function(response) {
    return response.page;
  }
});

App.Chapter = Backbone.Model.extend({
  select: function() {
    this.set({ selected: true });
    this.collection.selectChapter(this);
  }
});

App.SubChapter = Backbone.Model.extend({
  initialize: function(o) {
    this.id = o.id;
    this.comments = new App.Comments(o.comments);
  }
});

App.Comment = Backbone.Model.extend({
  sync: function(method, model, options) {
    if (method === "create") {
     $.ajax({
       type: 'POST',
       url: apiEndpoint + '/submit_comment/?post_id=' + model.get('post_id'),
       data: model.toJSON(),
       complete: function(xhr, status) {
         var response = JSON.parse(xhr.responseText);
         if (response.status === "error") {
           alert(response.error)
         }
       },
       error: function(xhr, status) {
         console.log(xhr)
         // alert()
       }
     })
    }
  }
});


// Collections
// ===========

App.Sections = Backbone.Collection.extend({
  model: App.Section,
  url: "/section",
  initialize: function(){
    this.on('remove', this.hideModel, this);
  },
  hideModel: function(model){
    model.trigger('hide');
  },
  focusOnSection: function(id) {
    var section = App.sections;
    var modelsToRemove = this.filter(function(section){
      return section.id != id;
    });
    this.remove(modelsToRemove);
  }
});


App.Chapters = Backbone.Collection.extend({
  model: App.Chapter,
  initialize: function(){
    this.on('remove', this.hideModel, this);
  },
  hideModel: function(model){
    model.trigger('hide');
  },
  focusOnChapter: function(id) {
    var chapter = App.chapter;
    console.log("Focus on Chapter")
    var modelsToRemove = this.filter(function(chapter){
      console.log(chapter.id)
      return chapter.id != id;
    });
    this.remove(modelsToRemove);
  },
  selectChapter: function(chapter){
    this.trigger("chapter:selected", chapter);
  }
});


App.SubChapters = Backbone.Collection.extend({
  model: App.SubChapter
});

App.Comments = Backbone.Collection.extend({
    model: App.Comment,
    localStorage: new Store("app-comments")
});


// Sections List View
// ==================

App.SectionsView = Backbone.View.extend({
  __name__: "Section List View",
  tagName : 'ol',
  className : 'section-list topcoat-list__container',
  initialize: function() {
    // this.collection.on('change', this.render, this);
  },
  render : function() {
    this.collection.each(function(d) {
      var sectionView = new App.SectionView({ model : d });
      this.$el.append(sectionView.render().el);
    }, this);
    return this;
  }
});

// Section View
// ============

App.SectionView = Backbone.View.extend({
  __name__: "Section View",
  tagName: 'li',
  className: 'section topcoat-list__item is-focused',
  events: {
    // "click": "test",
    "click" : "test",
    "tap" : "test",
    "openPanel" : "test",
    "closePanel" : "test"
  },

  initialize: function(){
    this.model.on('change', App.SectionsView.render, this);
    this.model.on('destroy hide', this.remove, this);

    // For CSS version:
    // this.$el.addClass('is-focused');
  },

  test: function(e){
    e.preventDefault();
    e.stopPropagation();
    // App.Router.navigate("section/" + this.model.id, true);
    this.$el.addClass('is-focused');
    // For CSS version:
    this.$el.find(".chapter").removeClass("isnt-focused").removeClass("is-focused")
  },

  remove: function(){
    this.$el.remove();
  },

  expandSectionPinch : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionPinch != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.addClass('is-open');
    }
  },

  expandSectionTap : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionTap != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.toggleClass('is-open');
    }
  },

  expandSectionClick : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionClickDev != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.toggleClass('is-open');
    }
  },

  colapseSectionPinch : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionPinch != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.removeClass('is-closed');
    }
  },

  render: function() {
    var that = this;
    var template = _.template($("#template-section").html());
    var html = template(this.model.toJSON());
    this.$el.append(html);

    this.model.fetch({success: function(model, response){
      // Init the Chapters
      that.chapters = new App.Chapters(model.attributes.children)
      that.chaptersView = new App.ChaptersView({ collection : that.chapters });
      that.$el.find('.js-chapterView').append(that.chaptersView.render().el);
    }});

    return this;
  }
});


// Chapter List View
// =================

App.ChaptersView = Backbone.View.extend({
  __name__: "Chapter List View",
  tagName : 'ol',
  className : 'chapter-list topcoat-list__container',
  initialize: function() {
  },
  render: function() {
    this.collection.each(function(d) {
      var chapterView = new App.ChapterView({ model: d });
      $(this.el).append(chapterView.render().el);
    }, this);
    return this;
  }
});

// Chapter View
// ============

App.ChapterView = Backbone.View.extend({
  __name__: "Chapter View",
  tagName: "li",
  className: "chapter topcoat-list__item",
  events: {
    "click": "chapterSelected",
    "tap": "chapterSelected",
    "openPanel": "chapterSelected",
    "closePanel": "chapterSelected"
  },
  initialize: function(){
    this.model.bind("change:selected", this.focusOnChapter, this);
  },

  chapterSelected: function(e){
    e.preventDefault();
    e.stopPropagation();
    // this.model.select();
    // For CSS version:
    this.$el.siblings(".chapter").addClass("isnt-focused");
    this.$el.addClass("is-focused");
  },

  focusOnChapter: function(model, selected) {
    console.log(this.model);
    App.Router.navigate("/chapter/" + this.model.attributes.slug);
    this.$el.siblings(".chapter").addClass("isnt-focused");
    this.$el.addClass("is-focused");
  },

  expandItemPinch : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionPinch != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.addClass('is-open');
    }
  },

  expandItemTap : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionTap != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.toggleClass('is-open');
    }
  },

  expandItemClick : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionClickDev != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.toggleClass('is-open');
    }
  },

  colapseItemPinch : function(e){
    e.preventDefault();
    e.stopPropagation();

    if (window.App.optionPinch != false) {
      var diveWrapper = $(this.el).find('.dive').first();
      diveWrapper.removeClass('is-closed');
    }
  },

  render : function() {
    var that = this;

    var template =  _.template($("#template-chapter").html());
    var html = template(this.model.toJSON());
    this.$el.append(html); // Temp hide

    that.subChapters = new App.SubChapters(this.model.attributes.children)
    that.subChaptersView = new App.SubChaptersView({ collection : that.subChapters });
    $(that.el).find('.js-subChapterView').append(that.subChaptersView.render().el);

    return this;
  }
})


// SubChapter List View
// ====================

App.SubChaptersView = Backbone.View.extend({
  __name__: "SubChapter List View",
  tagName : 'ol',
  className : 'subchapter-list topcoat-list__container',

  render: function() {
    this.collection.each(function(d) {
      var subChapterView = new App.SubChapterView({ model : d });
      this.$el.append(subChapterView.render());
    }, this);
    return this;
  }
});


// SubChapter View
// ===============

App.SubChapterView = Backbone.View.extend({
  __name__: "SubChapter View",
  tagName : 'li',
  className : 'subchapter topcoat-list__item',
  events: {
    "click": "test",
    "tap .js-target": "test",
    "gesturestart .js-target": "testPinch",
    "gesturestart .js-target": "testPinch"

  },

  initialize: function() {
    this.model.comments.bind('add', this.addOne, this);
  },

  render: function() {
    var that = this;
    // Comments template?
    if (that.model.get('comment_status') === 'open') {
      var commentsView = new App.CommentsView({
        collection: that.model.comments,
        model: that.model,
        tagName: 'div',
        className: 'js-target target target--comments'
      });
      $(this.el).append(commentsView.render().el);
    }
    return this.$el.prepend(this.model.toJSON().content);
  },

  test: function(e) {
    e.preventDefault();
    e.stopPropagation();

    this.$el.find('.target--comments').toggleClass('is-focused');
  },

  testPinch: function(e) {
    e.preventDefault();
    e.stopPropagation();
    if (e.scale < 1.0) {
      // User moved fingers closer together
      this.$el.find('.target--comments').removeClass('is-focused');
    } else if (e.scale > 1.0) {
      // User moved fingers further apart
      this.$el.find('.target--comments').addClass('is-focused');
    }
  },


  addOne: function(comment) {
    // console.log(comment)
    // var commentView = new App.CommentView({
    //   model : comment.attributes
    // });
    // console.log("Fix here to get comment to appear in list instantly")
    // console.log(this.$el.find('.comment-list'))
    this.$el.find('.comment-list').append('<li><strong>YOUR NEW COMMENT</strong>' + comment.attributes.content + '</li>');
    // this.$el.find('.comment-list').append(commentView.render().el);
  }

});


// Comments List View + Form
// =========================

App.CommentsView = Backbone.View.extend({
  __name__: "Comment List and Form View",
  // tagName : "ol",
  // className : "comment-list" // This doesnâ€™t seem to create an element, list is appended to ul.comment-list template
  events: {

    "click": "preventDefault",
    // "click .target--comments": "toggleComments",
    // "tap .target--comments": "toggleComments",
    // "openPanel .target--comments" : "toggleComments",
    // "closePanel .target--comments" : "toggleComments",

    "click .js-viewAddComment" : "showCommentForm",
    "tap .js-viewAddComment" : "showCommentForm",
    "click .js-cancelAddComment" : "cancelCommentForm",
    "tap .js-cancelAddComment" : "cancelCommentForm",
    "click .js-submitAddComment": "addComment",
    "tap .js-submitAddComment": "addComment"
  },

  initialize: function() {
    this.model.bind('change', this.updateCount, this);
  },

  preventDefault: function(e) {
    e.preventDefault();
    e.stopPropagation();
  },

  // This is the add button on the comments for the form
  showCommentForm : function(e) {
    e.preventDefault();
    e.stopPropagation();

    if (!$(this.el).find('.comment-add').is(":visible")) {
      var template =  _.template($("#template-comment-form").html());
      var html = template();
      $(this.el).append(html);
    }
  },

  clearForm: function() {
    $(this.el).find('.comment-form-name').val('');
    $(this.el).find('.comment-form-email').val('');
    $(this.el).find('.comment-form-content').val('');
  },

  closeForm: function() {
    $(this.el).find('.dive').toggleClass("is-open");
    var that = this;
    // window.setTimeout(function(){
      $(that.el).find('.comment-add').remove();
    // },1000);

  },

  addComment: function(e) {
    e.preventDefault();
    e.stopPropagation();

    var attr = {}
    attr.data = new Date();
    attr.name = $(this.el).find('.comment-form-name').val();
    attr.email = $(this.el).find('.comment-form-email').val();
    attr.content = $(this.el).find('.comment-form-content').val();
    attr.post_id = this.model.get('id');

    this.collection.create(attr);
    this.clearForm();
    this.closeForm();

    // Update the comment count
    this.model.set('comment_count', this.model.get('comment_count') + 1);
  },

  cancelCommentForm: function(e) {
    e.preventDefault();
    e.stopPropagation();
    this.closeForm();
  },

  toggleComments : function(e) {
    e.preventDefault();
    e.stopPropagation();
    $(this.el).find('.dive').first().toggleClass('is-open');
  },

  // Called on 'change'
  updateCount: function() {
    $(this.el).find('.dive-count').html(this.model.get('comment_count'));
  },

  render : function() {
    var template =  _.template($("#template-comment-list").html());
    var html = template(this.model.toJSON());
    $(this.el).append(html);

    this.collection.each(function(comment) {

      var commentView = new App.CommentView({ model : comment });
      $(this.el).find('.comment-list').append(commentView.render().el);
    }, this);

    return this;
  }
});


// Comment View
// ============

App.CommentView = Backbone.View.extend({
  __name__: "Comment View",
  tagName: "li",
  className: "comment topcoat-list__item new-item",

  // events: {
  //   "click": "preventDefault",
  //   "tap .reply"     : "addComment",
  //   "click .reply"   : "addComment"
  // },

  // preventDefault: function(e) {
  //   e.preventDefault();
  //   e.stopPropagation();
  // },

  // // This is the reply button
  // addComment: function(e) {
  //   e.preventDefault();
  //   e.stopPropagation();
  //   alert("Add Reply");
  // },

  render: function() {
    var template =  _.template($("#template-comment").html());
    var html = template(this.model.toJSON());

    $(this.el).append(html);
    return this;
  },

  renderNeue: function() {
    var template =  _.template($("#template-comment-neue").html());
    var html = template(this.model.toJSON());

    $(this.el).append(html);
    return this;
  }

});

App.Router = new (Backbone.Router.extend({
  routes: {
    "": "index",
    "section/:id": "viewSection",
    "chapter/:id": "viewChapter"
  },
  initialize: function(options) {
    var callback = function(sections) {
      App.sections = new App.Sections(sections)
      App.sectionsView = new App.SectionsView({ collection: App.sections });
      $('#book').html(App.sectionsView.render().$el); // rob
    }
    if (App.online) {
      $.getJSON(apiEndpoint + '/get_category_posts/?post_type=section&slug=section&order=ASC', function(sectionData, status, xhr){
        callback(sectionData.posts);
      });
    /* Offline data.json */
    } else {
      $.getJSON("data.json", function(sectionData, status, xhr){
        console.log(status)
        callback(sectionData.posts);
      });
    }
  },
  index: function(){
  },
  viewSection: function(id){
    console.log("View section requested: " + id);
    // App.Router.navigate("section/edit");
    App.sections.focusOnSection(id);
  },
  viewChapter: function(id){
    App.chapter.focusOnChapter(id);
  },
  start: function() {
    Backbone.history.start({ pushState: true });
  }
}));

$(function() {
  App.Router.start();
});